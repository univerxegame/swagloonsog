{"version":3,"sources":["MintCountdown.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts","connection.tsx"],"names":["RootContainer","styled","_ref","theme","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","DoneContainer","_ref2","marginBottom","fontWeight","ItemContainer","MintCountdown","_ref3","date","status","style","onComplete","_jsx","Countdown","renderer","_ref4","days","hours","minutes","seconds","completed","children","_jsxs","Paper","elevation","concat","CTAButton","Button","_templateObject","_taggedTemplateLiteral","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","wallet","useWallet","connection","useConnection","_useState","useState","_useState2","_slicedToArray","verified","setVerified","_useGateway","useGateway","requestGatewayToken","gatewayStatus","_useState3","_useState4","webSocketSubscriptionId","setWebSocketSubscriptionId","_useState5","_useState6","clicked","setClicked","_useState7","_useState8","waitForActiveToken","setWaitForActiveToken","useEffect","mint","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","removeAccountChangeListener","stop","apply","arguments","previousGatewayStatus","value","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","state","console","log","ACTIVE","disabled","onClick","_callee2","network","gatewayToken","gatewayTokenAddress","_context2","gatekeeper","gatekeeperNetwork","toBase58","CIVIC_GATEKEEPER_NETWORK","findGatewayToken","publicKey","sent","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","onGatewayTokenChange","Error","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","ConnectButton","WalletDialogButton","MintContainer","div","_templateObject2","getCountdownDate","_candyMachine$state$e","endSettings","endSettingType","toDate","number","goLiveDate","anchor","Date","getTime","undefined","Home","props","_candyMachine$state","_candyMachine$state2","_candyMachine$state2$","isUserMinting","setIsUserMinting","setCandyMachine","message","severity","alertState","setAlertState","setIsActive","_useState9","_useState10","endDate","setEndDate","_useState11","_useState12","itemsRemaining","setItemsRemaining","_useState13","_useState14","isWhitelistUser","setIsWhitelistUser","_useState15","_useState16","setIsPresale","_useState17","_useState18","isValidBalance","setIsValidBalance","_useState19","_useState20","discountPrice","setDiscountPrice","_useState21","_useState22","needTxnSplit","setNeedTxnSplit","_useState23","_useState24","setupTxn","setSetupTxn","rpcUrl","rpcHost","anchorWallet","useAnchorWallet","_useWallet","connect","connected","cluster","refreshCandyMachineState","useCallback","commitment","_cndy$state$endSettin","_cndy$state$endSettin2","_cndy$state$whitelist","_cndy$state$whitelist2","_cndy$state$gatekeepe","cndy","active","presale","isWLUser","userPrice","token","balance","_mint","_token","_balance","valid","_balance2","_valid","limit","_yield$getCollectionP","_yield$getCollectionP2","collectionPDA","collectionPDAAccount","txnEstimate","_args","length","abrupt","error","hideDuration","Connection","candyMachineId","getCandyMachineState","toNumber","price","whitelistMintSettings","PublicKey","getAtaForMint","getTokenAccountBalance","parseInt","amount","t0","tokenMint","gte","t1","t2","getBalance","t3","Math","min","itemsAvailable","itemsRedeemed","getCollectionPDA","getAccountInfo","retainAuthority","mode","burnEveryTime","expireOnUse","t4","startsWith","beforeTransactions","afterTransactions","_setupMint","setupMint","_status","mintResult","metadataStatus","remaining","_args2","program","createAccountsForMint","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","mintOneToken","mintTxId","provider","metadataKey","msg","code","location","reload","indexOf","finish","toggleMintButton","now","loop","setTimeout","Container","marginTop","maxWidth","position","paddingBottom","backgroundColor","_Fragment","Grid","container","direction","item","xs","Typography","formatNumber","asNumber","align","signTransaction","GatewayProvider","CANDY_MACHINE_PROGRAM","clusterUrl","options","autoShowModal","val","e","adapter","name","SolanaMobileWalletAdapterWalletName","preventDefault","Snackbar","autoHideDuration","onClose","_objectSpread","Alert","createTheme","palette","process","getCandyMachineId","_process$env$REACT_AP","_process$env$REACT_AP2","clusterApiUrl","App","endpoint","useMemo","wallets","PhantomWalletAdapter","SolflareWalletAdapter","SlopeWalletAdapter","SolletWalletAdapter","SolletExtensionWalletAdapter","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","WalletDialogProvider","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","_x","_x2","getNetworkExpire","Buffer","from","_x3","getNetworkToken","_callee3","_context3","_x4","_x5","TOKEN_METADATA_PROGRAM_ID","txid","timeout","queryStatus","done","subId","_args3","slot","confirmations","Promise","resolve","reject","signatureStatuses","getSignatureStatuses","sleep","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","_callee6","getProgramState","getCurrentBlockTime","_yield$Promise$all","_yield$Promise$all2","_yield$Promise$all2$","currentBlockTime","timeDiff","_context6","preflightCommitment","_ref5","_callee4","idl","_context4","fetchIdl","account","fetch","_ref6","_callee5","_yield$connection$get","_context5","getSlot","getBlockTime","all","id","authority","treasury","hiddenSettings","_x6","_x7","_x8","getFreezePdaState","_ref7","_callee7","freezePda","_context7","_x9","_x10","getMasterEdition","_ref8","_callee8","_context8","_x11","getMetadata","_ref9","_callee9","_context9","_x12","getCandyMachineCreator","_ref10","_callee10","_context10","_x13","getFreezePda","_ref11","_callee11","_context11","_x14","_ref12","_callee12","candyMachineAddress","_context12","_x15","getCollectionAuthorityRecordPDA","_ref13","_callee13","newAuthority","_context13","_x16","_x17","_ref14","_callee14","userTokenAccountAddress","signers","instructions","_context14","Keypair","generate","MintLayout","span","getMinimumBalanceForRentExemption","t5","t6","fromPubkey","newAccountPubkey","space","lamports","t7","createAccount","call","t8","Token","createInitMintInstruction","t9","t10","createMintToInstruction","t11","t12","sendTransactions","SequenceType","StopOnFailure","t13","txs","userTokenAccount","_x18","_x19","_ref15","_callee15","_setupState$mint","setupState","userPayingAccountAddress","remainingAccounts","whitelistToken","metadataAddress","masterEdition","_yield$getCandyMachin","_yield$getCandyMachin2","candyMachineCreator","creatorBump","freezePdaState","freezeAta","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","instructionsMatrix","signersMatrix","txns","mintTxn","_args15","_context15","push","t14","t15","t16","t17","t18","t19","t20","toString","map","rm","t21","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","t22","collectionPda","t23","setCollectionDuringMint","t24","t25","t","t26","_x20","_x21","ms","instructionSet","signersSet","sequenceType","successCallback","failCallback","blockhash","unsignedTxns","_loop","i","partiallySignedTransactions","fullySignedTransactions","signedTxns","pendingTxns","_loop2","_i","_ret2","result","Parallel","ind","WalletNotConnectedError","getLatestBlockhash","Transaction","forEach","add","recentBlockhash","feePayer","partialSign","_toConsumableArray","filter","signatures","sig","equals","signAllTransactions","signedTxnPromise","sendSignedTransaction","signedTransaction","v","delegateYield","getUnixTs","_sendSignedTransaction","_ref6$timeout","rawTransaction","startTime","confirmation","simulateResult","line","serialize","sendRawTransaction","skipPreflight","simulateTransaction","logs","slice","JSON","stringify","_x22","_simulateTransaction","signData","wireTransaction","encodedTransaction","args","res","_recentBlockhash","_disableBlockhashCaching","serializeMessage","_serialize","encoding","_rpcRequest","_x23","_x24","_x25","_awaitTransactionSignatureConfirmation","_args12","onSignature","context","_x26","_x27"],"mappings":"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","file":"static/js/main.08705609.chunk.js","sourcesContent":["import { Paper } from \"@mui/material\";\nimport Countdown from \"react-countdown\";\nimport React from \"react\";\nimport { styled } from \"@mui/system\";\n\nconst RootContainer = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  padding: theme.spacing(0),\n  \"& > *\": {\n    margin: theme.spacing(0.4),\n    width: theme.spacing(6),\n    height: theme.spacing(6),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignContent: \"center\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    background: \"#384457\",\n    color: \"white\",\n    borderRadius: 5,\n    fontSize: 10,\n  },\n}));\n\nconst DoneContainer = styled(\"span\")(({ theme }) => ({\n  display: \"flex\",\n  margin: 0,\n  marginBottom: theme.spacing(0.5),\n  height: theme.spacing(3.5),\n  padding: theme.spacing(1),\n  flexDirection: \"column\",\n  alignContent: \"center\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  background: \"#384457\",\n  color: \"white\",\n  borderRadius: 5,\n  fontWeight: \"bold\",\n  fontSize: 18,\n}));\n\nconst ItemContainer = styled(\"span\")({\n  fontWeight: \"bold\",\n  fontSize: 18,\n});\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <DoneContainer>{status}</DoneContainer> : null;\n    } else {\n      return (\n        <RootContainer style={style}>\n          <Paper elevation={0}>\n            <ItemContainer>{hours < 10 ? `0${hours}` : hours}</ItemContainer>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <ItemContainer>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </ItemContainer>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <ItemContainer>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </ItemContainer>\n            <span>secs</span>\n          </Paper>\n        </RootContainer>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import styled from \"styled-components\";\nimport Button from \"@mui/material/Button\";\nimport { CandyMachineAccount } from \"./candy-machine\";\nimport { CircularProgress } from \"@mui/material\";\nimport { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from \"@identity.com/solana-gateway-ts\";\nimport { CIVIC_GATEKEEPER_NETWORK } from \"./utils\";\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  setIsMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n  const [waitForActiveToken, setWaitForActiveToken] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return \"SOLD OUT\";\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return \"WHITELIST MINT\";\n    }\n\n    return \"MINT\";\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find((state) => previousGatewayStatus === state) &&\n      !invalidToStates.find((state) => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n    console.log(\"change: \", GatewayStatus[gatewayStatus]);\n  }, [waitForActiveToken, previousGatewayStatus, gatewayStatus]);\n\n  useEffect(() => {\n    if (waitForActiveToken && gatewayStatus === GatewayStatus.ACTIVE) {\n      console.log(\"Minting after token active\");\n      setWaitForActiveToken(false);\n      onMint();\n    }\n  }, [waitForActiveToken, gatewayStatus, onMint]);\n\n  return (\n    <CTAButton\n      disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === CIVIC_GATEKEEPER_NETWORK) {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              setWaitForActiveToken(true);\n              await requestGatewayToken();\n              console.log(\"after: \", gatewayStatus);\n            }\n          } else if (\n            network === \"ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE\" ||\n            network === \"tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt\"\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              window.open(\n                `https://verify.encore.fans/?gkNetwork=${network}`,\n                \"_blank\"\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  \"confirmed\"\n                )\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\n\nimport styled from \"styled-components\";\nimport { Container, Snackbar } from \"@mui/material\";\nimport Paper from \"@mui/material/Paper\";\nimport Alert from \"@mui/lab/Alert\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport {\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport {\n  awaitTransactionSignatureConfirmation,\n  CANDY_MACHINE_PROGRAM,\n  CandyMachineAccount,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from \"./candy-machine\";\nimport { AlertState, formatNumber, getAtaForMint, toDate } from \"./utils\";\nimport { MintCountdown } from \"./MintCountdown\";\nimport { MintButton } from \"./MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { SolanaMobileWalletAdapterWalletName } from \"@solana-mobile/wallet-adapter-mobile\";\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n  network: WalletAdapterNetwork;\n  error?: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const anchorWallet = useAnchorWallet();\n  const { connect, connected, publicKey, wallet } = useWallet();\n  const cluster = props.network;\n\n  const refreshCandyMachineState = useCallback(\n    async (commitment: Commitment = \"confirmed\") => {\n      if (!publicKey) {\n        return;\n      }\n      if (props.error !== undefined) {\n        setAlertState({\n          open: true,\n          message: props.error,\n          severity: \"error\",\n          hideDuration: null,\n        });\n        return;\n      }\n\n      const connection = new Connection(props.rpcHost, commitment);\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet as anchor.Wallet,\n            props.candyMachineId,\n            connection\n          );\n          console.log(\"Candy machine state: \", cndy);\n          let active = cndy?.state.goLiveDate\n            ? cndy?.state.goLiveDate.toNumber() < new Date().getTime() / 1000\n            : false;\n          let presale = false;\n\n          // duplication of state to make sure we have the right values!\n          let isWLUser = false;\n          let userPrice = cndy.state.price;\n\n          // whitelist mint?\n          if (cndy?.state.whitelistMintSettings) {\n            // is it a presale mint?\n            if (\n              cndy.state.whitelistMintSettings.presale &&\n              (!cndy.state.goLiveDate ||\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n            ) {\n              presale = true;\n            }\n            // is there a discount?\n            if (cndy.state.whitelistMintSettings.discountPrice) {\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\n            } else {\n              setDiscountPrice(undefined);\n              // when presale=false and discountPrice=null, mint is restricted\n              // to whitelist users only\n              if (!cndy.state.whitelistMintSettings.presale) {\n                cndy.state.isWhitelistOnly = true;\n              }\n            }\n            // retrieves the whitelist token\n            const mint = new anchor.web3.PublicKey(\n              cndy.state.whitelistMintSettings.mint\n            );\n            const token = (await getAtaForMint(mint, publicKey))[0];\n\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n              isWLUser = parseInt(balance.value.amount) > 0;\n              // only whitelist the user if the balance > 0\n              setIsWhitelistUser(isWLUser);\n\n              if (cndy.state.isWhitelistOnly) {\n                active = isWLUser && (presale || active);\n              }\n            } catch (e) {\n              setIsWhitelistUser(false);\n              // no whitelist user, no mint\n              if (cndy.state.isWhitelistOnly) {\n                active = false;\n              }\n              console.log(\n                \"There was a problem fetching whitelist token balance\"\n              );\n              console.log(e);\n            }\n          }\n          userPrice = isWLUser ? userPrice : cndy.state.price;\n\n          if (cndy?.state.tokenMint) {\n            // retrieves the SPL token\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n            const token = (await getAtaForMint(mint, publicKey))[0];\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\n\n              // only allow user to mint if token balance >  the user if the balance > 0\n              setIsValidBalance(valid);\n              active = active && valid;\n            } catch (e) {\n              setIsValidBalance(false);\n              active = false;\n              // no whitelist user, no mint\n              console.log(\"There was a problem fetching SPL token balance\");\n              console.log(e);\n            }\n          } else {\n            const balance = new anchor.BN(\n              await connection.getBalance(publicKey)\n            );\n            const valid = balance.gte(userPrice);\n            setIsValidBalance(valid);\n            active = active && valid;\n          }\n\n          // datetime to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.date) {\n            setEndDate(toDate(cndy.state.endSettings.number));\n            if (\n              cndy.state.endSettings.number.toNumber() <\n              new Date().getTime() / 1000\n            ) {\n              active = false;\n            }\n          }\n          // amount to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.amount) {\n            const limit = Math.min(\n              cndy.state.endSettings.number.toNumber(),\n              cndy.state.itemsAvailable\n            );\n            if (cndy.state.itemsRedeemed < limit) {\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\n            } else {\n              setItemsRemaining(0);\n              cndy.state.isSoldOut = true;\n            }\n          } else {\n            setItemsRemaining(cndy.state.itemsRemaining);\n          }\n\n          if (cndy.state.isSoldOut) {\n            active = false;\n          }\n\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n          const collectionPDAAccount = await connection.getAccountInfo(\n            collectionPDA\n          );\n\n          setIsActive((cndy.state.isActive = active));\n          setIsPresale((cndy.state.isPresale = presale));\n          setCandyMachine(cndy);\n\n          const txnEstimate =\n            892 +\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n            (cndy.state.tokenMint ? 66 : 0) +\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\n            (cndy.state.gatekeeper ? 33 : 0) +\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n          setNeedTxnSplit(txnEstimate > 1230);\n        } catch (e) {\n          if (e instanceof Error) {\n            if (\n              e.message === `Account does not exist ${props.candyMachineId}`\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value wrong in your .env file, or you are using the wrong RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            } else if (\n              e.message.startsWith(\"failed to get info about account\")\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: `${e}`,\n              severity: \"error\",\n              hideDuration: null,\n            });\n          }\n          console.log(e);\n        }\n      } else {\n        setAlertState({\n          open: true,\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n          severity: \"error\",\n          hideDuration: null,\n        });\n      }\n    },\n    [anchorWallet, props.candyMachineId, props.error, props.rpcHost]\n  );\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = []\n  ) => {\n    try {\n      setIsUserMinting(true);\n      if (connected && candyMachine?.program && publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: \"Please sign account setup transaction\",\n            severity: \"info\",\n          });\n          setupMint = await createAccountsForMint(candyMachine, publicKey);\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                \"Setup transaction succeeded! Please sign minting transaction\",\n              severity: \"info\",\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: \"Mint failed! Please try again!\",\n              severity: \"error\",\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Please sign minting transaction\",\n            severity: \"info\",\n          });\n        }\n\n        const mintResult = await mintOneToken(\n          candyMachine,\n          publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn\n        );\n\n        let status: any = { err: true };\n        let metadataStatus = null;\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintResult.mintTxId,\n            props.txTimeout,\n            props.connection,\n            true\n          );\n\n          metadataStatus =\n            await candyMachine.program.provider.connection.getAccountInfo(\n              mintResult.metadataKey,\n              \"processed\"\n            );\n          console.log(\"Metadata status: \", !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          const remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n            hideDuration: 7000,\n          });\n          refreshCandyMachineState(\"processed\");\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message:\n              \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\n            severity: \"error\",\n            hideDuration: 8000,\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n\n  return (\n    <Container style={{ marginTop: 100 }}>\n      <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\n        <Paper\n          style={{\n            padding: 24,\n            paddingBottom: 10,\n            backgroundColor: \"#151A1F\",\n            borderRadius: 6,\n          }}\n        >\n          {!connected ? (\n            <ConnectButton\n              onClick={(e) => {\n                if (\n                  wallet?.adapter.name === SolanaMobileWalletAdapterWalletName\n                ) {\n                  connect();\n                  e.preventDefault();\n                }\n              }}\n            >\n              Connect Wallet\n            </ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      {`${itemsRemaining}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? \"Discount Price\"\n                        : \"Price\"}\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{ fontWeight: \"bold\" }}\n                    >\n                      {isWhitelistUser && discountPrice\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                        : `◎ ${formatNumber.asNumber(\n                            candyMachine.state.price\n                          )}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5}>\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: \"flex-end\" }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton}\n                        />\n                        <Typography\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: \"bold\" }}\n                        >\n                          TO END OF MINT\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: \"flex-end\" }}\n                          status={\n                            candyMachine?.state?.isSoldOut ||\n                            (endDate && Date.now() > endDate.getTime())\n                              ? \"COMPLETED\"\n                              : isPresale\n                              ? \"PRESALE\"\n                              : \"LIVE\"\n                          }\n                          onComplete={toggleMintButton}\n                        />\n                        {isPresale &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                            new Date().getTime() / 1000 && (\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: \"bold\" }}\n                            >\n                              UNTIL PUBLIC MINT\n                            </Typography>\n                          )}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                candyMachine?.state.gatekeeper &&\n                publicKey &&\n                anchorWallet?.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey:\n                        publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\n                      signTransaction: anchorWallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                    }\n                    clusterUrl={rpcUrl}\n                    cluster={cluster}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={(val) => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={\n                        isActive ||\n                        (isPresale && isWhitelistUser && isValidBalance)\n                      }\n                    />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    setIsMinting={(val) => setIsUserMinting(val)}\n                    onMint={onMint}\n                    isActive={\n                      isActive ||\n                      (isPresale && isWhitelistUser && isValidBalance)\n                    }\n                  />\n                )}\n              </MintContainer>\n            </>\n          )}\n          <Typography\n            variant=\"caption\"\n            align=\"center\"\n            display=\"block\"\n            style={{ marginTop: 7, color: \"grey\" }}\n          >\n            Powered by METAPLEX\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\n        }\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport Home from \"./Home\";\nimport { DEFAULT_TIMEOUT } from \"./connection\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\n\nimport { createTheme, ThemeProvider } from \"@mui/material\";\nimport { PhantomWalletAdapter } from \"@solana/wallet-adapter-phantom\";\nimport { SlopeWalletAdapter } from \"@solana/wallet-adapter-slope\";\nimport { SolflareWalletAdapter } from \"@solana/wallet-adapter-solflare\";\nimport {\n  SolletWalletAdapter,\n  SolletExtensionWalletAdapter,\n} from \"@solana/wallet-adapter-sollet\";\n\nconst theme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    return new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID!);\n  } catch (e) {\n    console.log(\"Failed to construct CandyMachineId\", e);\n    return undefined;\n  }\n};\n\nlet error: string | undefined = undefined;\n\nif (process.env.REACT_APP_SOLANA_NETWORK === undefined) {\n  error =\n    \"Your REACT_APP_SOLANA_NETWORK value in the .env file doesn't look right! The options are devnet and mainnet-beta!\";\n} else if (process.env.REACT_APP_SOLANA_RPC_HOST === undefined) {\n  error =\n    \"Your REACT_APP_SOLANA_RPC_HOST value in the .env file doesn't look right! Make sure you enter it in as a plain-text url (i.e., https://metaplex.devnet.rpcpool.com/)\";\n}\n\nconst candyMachineId = getCandyMachineId();\nconst network = (process.env.REACT_APP_SOLANA_NETWORK ??\n  \"devnet\") as WalletAdapterNetwork;\nconst rpcHost =\n  process.env.REACT_APP_SOLANA_RPC_HOST ?? anchor.web3.clusterApiUrl(\"devnet\");\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      new PhantomWalletAdapter(),\n      new SolflareWalletAdapter({ network }),\n      new SlopeWalletAdapter(),\n      new SolletWalletAdapter({ network }),\n      new SolletExtensionWalletAdapter({ network }),\n    ],\n    []\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <Home\n              candyMachineId={candyMachineId}\n              connection={connection}\n              txTimeout={DEFAULT_TIMEOUT}\n              rpcHost={rpcHost}\n              network={network}\n              error={error}\n            />\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n  hideDuration?: number | null;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return \"--\";\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  \"gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs\"\n);\n\nexport const CIVIC_GATEKEEPER_NETWORK =\n  \"ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6\";\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from(\"expire\")],\n    CIVIC\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from(\"gateway\"),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","/* eslint-disable */\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from \"@solana/web3.js\";\nimport { sendTransactions, SequenceType } from \"./connection\";\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from \"./utils\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: null | anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: null | anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  const subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    await connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"processed\",\n  });\n\n  const getProgramState = async (): Promise<[anchor.Program, any]> => {\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\n    return [program, state];\n  };\n\n  const getCurrentBlockTime = async (): Promise<number> => {\n    const slot = await connection.getSlot();\n    return (await connection.getBlockTime(slot)) ?? new Date().getTime() / 1000;\n  };\n\n  const [[program, state], currentBlockTime] = await Promise.all([\n    getProgramState(),\n    getCurrentBlockTime(),\n  ]);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n  const timeDiff = new Date().getTime() / 1000 - currentBlockTime;\n  const goLiveDate =\n    state.data.goLiveDate !== null ? state.data.goLiveDate + timeDiff : null;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nexport const getFreezePdaState = async (\n  program: anchor.Program,\n  freezePda: anchor.web3.PublicKey\n): Promise<any> => {\n  try {\n    const state: any = await program.account.freezePda.fetch(freezePda);\n    return state;\n  } catch (error) {\n    return null;\n  }\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"candy_machine\"), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport const getFreezePda = async (\n  candyMachine: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"freeze\"), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"collection\"), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"collection_authority\"),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport type SetupState = {\n  mint: anchor.web3.Keypair;\n  userTokenAccount: anchor.web3.PublicKey;\n  transaction: string;\n};\n\nexport const createAccountsForMint = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey\n): Promise<SetupState> => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1\n    ),\n  ];\n\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions],\n        [signers],\n        SequenceType.StopOnFailure,\n        \"singleGossip\",\n        () => {},\n        () => false,\n        undefined,\n        [],\n        []\n      )\n    ).txs[0].txid,\n  };\n};\n\ntype MintResult = {\n  mintTxId: string;\n  metadataKey: anchor.web3.PublicKey;\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n  setupState?: SetupState\n): Promise<MintResult | null> => {\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const instructions = [];\n  const signers: anchor.web3.Keypair[] = [];\n  console.log(\"SetupState: \", setupState);\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(\n      ...[\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports:\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span\n            ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          payer,\n          payer\n        ),\n        createAssociatedTokenAccountInstruction(\n          userTokenAccountAddress,\n          payer,\n          payer,\n          mint.publicKey\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          userTokenAccountAddress,\n          payer,\n          [],\n          1\n        ),\n      ]\n    );\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: payer,\n        isWritable: false,\n        isSigner: true,\n      });\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: payer,\n      isWritable: false,\n      isSigner: true,\n    });\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress\n  );\n\n  const freezePda = (await getFreezePda(candyMachineAddress))[0];\n  console.log(freezePda.toString());\n\n  const freezePdaState = await getFreezePdaState(\n    candyMachine.program,\n    freezePda\n  );\n\n  console.log(\"Freeze state: \");\n  console.log(freezePdaState);\n\n  if (freezePdaState != null) {\n    remainingAccounts.push({\n      pubkey: freezePda,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: userTokenAccountAddress,\n      isWritable: false,\n      isSigner: false,\n    });\n    if (candyMachine.state.tokenMint != null) {\n      const freezeAta = (\n        await getAtaForMint(candyMachine.state.tokenMint, freezePda)\n      )[0];\n      remainingAccounts.push({\n        pubkey: freezeAta,\n        isWritable: true,\n        isSigner: false,\n      });\n    }\n  }\n\n  console.log(remainingAccounts.map((rm) => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    })\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log(\"Collection PDA: \", collectionPDA.toBase58());\n        console.log(\"Authority: \", candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          })\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions];\n  const signersMatrix = [signers];\n\n  try {\n    const txns = (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        \"singleGossip\",\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions\n      )\n    ).txs.map((t) => t.txid);\n    const mintTxn = txns[0];\n    return {\n      mintTxId: mintTxn,\n      metadataKey: metadataAddress,\n    };\n  } catch (e) {\n    console.log(e);\n  }\n  return null;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n","/* eslint-disable */\nimport {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n} from \"@solana/web3.js\";\n\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][]\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  const toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          \"single\"\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          \"single\"\n        );\n        ids = ids.concat(txs.map((t) => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      \"Died on \",\n      stopPoint,\n      \"retrying from instruction\",\n      instructions[stopPoint],\n      \"instructions length is\",\n      instructions.length\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = \"singleGossip\",\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  blockhash?: Blockhash,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = []\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!blockhash) {\n    blockhash = (await connection.getLatestBlockhash(commitment)).blockhash;\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    const transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = blockhash;\n    transaction.feePayer = wallet.publicKey;\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter((t) =>\n    t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n    (t) => !t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\n  );\n  let signedTxns = await wallet.signAllTransactions(\n    partiallySignedTransactions\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n    \"Signed txns length\",\n    signedTxns.length,\n    \"vs handed in length\",\n    instructionSet.length\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n          successCallback(txid, i)\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log(\"Failed at txn index:\", i);\n        console.log(\"Caught failure:\", e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[] | Transaction,\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  blockhash?: Blockhash\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (!Array.isArray(instructions)) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n\n    transaction.recentBlockhash =\n      blockhash || (await connection.getLatestBlockhash(commitment)).blockhash;\n    if (includesFeePayer) {\n      transaction.feePayer = signers[0].publicKey;\n    } else {\n      transaction.feePayer = wallet.publicKey;\n    }\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  const options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  blockhash?: Blockhash,\n  beforeSend?: () => void\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash =\n    blockhash || (await connection.getLatestBlockhash(commitment)).blockhash;\n  if (includesFeePayer) {\n    transaction.feePayer = signers[0].publicKey;\n  } else {\n    transaction.feePayer = wallet.publicKey;\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    }\n  );\n\n  console.log(\"Started awaiting confirmation for\", txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      \"recent\",\n      true\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error(\"Transaction failed: Custom instruction error\");\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error(\"Timeout Error caught\", err);\n    if (err.timeout) {\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, \"single\")\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith(\"Program log: \")) {\n            throw new Error(\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config: any = { encoding: \"base64\", commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\n  if (res.error) {\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = \"recent\",\n  queryStatus = false\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    await connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n"],"sourceRoot":""}